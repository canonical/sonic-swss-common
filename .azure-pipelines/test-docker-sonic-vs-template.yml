parameters:
- name: timeout
  type: number
  default: 360

- name: log_artifact_name
  type: string

jobs:
- job:
  displayName: vstest
  timeoutInMinutes: ${{ parameters.timeout }}

  pool: sonic-common

  steps:
  - script: |
      ls -A1 | xargs -I{} sudo rm -rf {}
    displayName: "Clean workspace"
  - checkout: self
    clean: true
    displayName: "Checkout sonic-swss-common"
  - checkout: sonic-swss
    clean: true
    displayName: "Checkout sonic-swss"
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: docker-sonic-vs
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download pre-stage built docker-sonic-vs"
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: sonic-swss-common.amd64.ubuntu20_04
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download pre-stage built sonic-swss-common.amd64.ubuntu20_04"

  - script: |
      set -x
      ls -l
      sudo sonic-swss-common/.azure-pipelines/build_and_install_module.sh

      sudo apt-get install -y libhiredis0.14
      pushd $(Build.ArtifactStagingDirectory)
      find download -name libswsscommon*.deb | xargs -i sudo dpkg -i --force-confask,confnew {}
      apt-get install -f
      find download -name python3-swsscommon*.deb | xargs -i sudo dpkg -i {}
      popd
      # install packages for vs test
      sudo apt-get install -y net-tools bridge-utils vlan
      sudo apt-get install -y python3-pip
      sudo pip3 install pytest==4.6.2 attrs==19.1.0 exabgp==4.0.10 distro==1.5.0 docker==4.4.1 redis==3.3.4 flaky==3.7.0
    displayName: "Install dependencies"

  - script: |
      set -x
      sudo docker load -i $(Build.ArtifactStagingDirectory)/download/docker-sonic-vs.gz
      docker ps
      ip netns list
      pushd sonic-swss/tests
      sudo py.test -v --force-flaky --junitxml=tr.xml --imgname=docker-sonic-vs:$(Build.DefinitionName).$(Build.BuildNumber)
      rm -rf $(Build.ArtifactStagingDirectory)/download
    displayName: "Run vs tests"

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/tr.xml'
      testRunTitle: vstest
    condition: always()

  - script: |
      cp -r sonic-swss/tests/log $(Build.ArtifactStagingDirectory)/
    displayName: "Collect logs"
    condition: always()

  - publish: $(Build.ArtifactStagingDirectory)/
    artifact: ${{ parameters.log_artifact_name }}@$(System.JobAttempt)
    displayName: "Publish logs"
    condition: always()
